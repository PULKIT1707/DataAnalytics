import pandas as pd
import json

def collapse_genres(genres):
    # Split the comma-separated genres and sort them alphabetically
    return " ".join(sorted(genres.split(", "))) if isinstance(genres, str) else ""

def combine_features(row):
    try:
        # Combine title, genres, and averageRating for the text field
        return f"{row['title']} {row['genres_name']} {row['averageRating']}"
    except Exception as e:
        print("Error:", e, row)

def process_imdb_csv(input_file, output_file):
    """
    Processes a new movies CSV file to create a Vespa-compatible JSON format.

    This function reads a CSV file containing movie data, processes the data to
    generate new columns for text search, and outputs a JSON file with the necessary
    fields (`put` and `fields`) for indexing documents in Vespa.

    Args:
      input_file (str): The path to the input CSV file containing the movie data.
                        Expected columns are 'id', 'title', 'genres', 'averageRating', and 'releaseYear'.
      output_file (str): The path to the output JSON file to save the processed data in
                         Vespa-compatible format.

    Workflow:
      1. Reads the CSV file into a Pandas DataFrame.
      2. Processes the 'genres' column, extracting genre names into a new 'genres_name' column.
      3. Fills missing values in 'title', 'averageRating', and 'genres_name' columns with empty strings.
      4. Creates a "text" column that combines specified features using the `combine_features` function.
      5. Selects and renames columns to match required Vespa format: 'doc_id', 'title', and 'text'.
      6. Constructs a JSON-like 'fields' column that includes the record's data.
      7. Creates a 'put' column based on 'doc_id' to uniquely identify each document.
      8. Outputs the processed data to a JSON file in a Vespa-compatible format.

    Returns:
      None. Writes the processed DataFrame to `output_file` as a JSON file.
    """
    movies = pd.read_csv(input_file)
    
    # Process genres to create a space-separated genre string
    movies['genres_name'] = movies['genres'].apply(collapse_genres)

    # Fill missing values in specified columns
    for f in ['title', 'averageRating', 'genres_name']:
        movies[f] = movies[f].fillna('')

    # Create the "text" field by combining selected fields
    movies["text"] = movies.apply(combine_features, axis=1)

    # Select and rename columns as per Vespa requirements
    movies = movies[['id', 'title', 'text']]
    movies.rename(columns={'title': 'title', 'id': 'doc_id'}, inplace=True)

    # Create 'fields' column as JSON-like structure of each record
    movies['fields'] = movies.apply(lambda row: row.to_dict(), axis=1)

    # Create 'put' column based on 'doc_id'
    movies['put'] = movies['doc_id'].apply(lambda x: f"id:hybrid-search:doc::{x}")

    # Output final result in JSON Lines format
    df_result = movies[['put', 'fields']]
    print(df_result.head())
    df_result.to_json(output_file, orient='records', lines=True)

# Example usage
process_imdb_csv("/Users/spartan/sjsu-data226/week11/Custom Dataset/data.csv", "custom_output_vespa.json")
